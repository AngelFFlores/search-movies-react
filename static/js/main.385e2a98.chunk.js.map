{"version":3,"sources":["components/Title.js","components/SearchForm.js","components/Movie.js","components/MoviesList.js","pages/Home.js","components/ButtonBackToHome.js","pages/Detail.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Title","children","className","SearchForm","state","inputMovie","_handleChange","e","setState","target","value","_handleSubmit","preventDefault","fetch","then","res","json","results","Search","totalResults","console","log","props","onResults","onSubmit","this","onChange","type","placeholder","Component","Movie","id","poster","title","year","to","alt","src","MoviesList","movies","map","movie","key","imdbID","Poster","Home","usedSearch","_handleResults","_renderResults","length","ButtonBackToHome","Detail","movieId","match","params","_fetchMovie","window","history","back","Actors","Metascore","Plot","NotFound","style","color","fontSize","App","exact","path","component","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.385e2a98.chunk.js","sourcesContent":["import React from \"react\"\n\nexport const Title =  ({children}) => (\n     <h1 className = \"title\"> {children} </h1>\n)","import React, { Component } from \"react\";\n\nconst API_KEY = \"4287ad07\";\nexport class SearchForm extends Component {\n  state = {\n    inputMovie: \"\",\n  };\n\n  _handleChange = (e) => {\n    this.setState({ inputMovie: e.target.value });\n  };\n  _handleSubmit = (e) => {\n    e.preventDefault();\n\n    const { inputMovie } = this.state;\n\n    fetch(`https://www.omdbapi.com/?apikey=${API_KEY}&s=${inputMovie}`)\n      .then((res) => res.json())\n      .then((results) => {\n        const { Search = [], totalResults = \"0\" } = results;\n        console.log({ Search, totalResults });\n        this.props.onResults(Search);\n      });\n  };\n  render() {\n    return (\n      <form onSubmit={this._handleSubmit}>\n        <div className=\"field has-addons\">\n          <div className=\"control\">\n            <input\n              className=\"input\"\n              onChange={this._handleChange}\n              type=\"text\"\n              placeholder=\"Movie to Search..\"\n            />\n          </div>\n          <div className=\"control\">\n            <button className=\"button is-info\">Search</button>\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Link } from 'react-router-dom'\n\nexport class Movie extends Component {\n  static propTypes = {\n    id: PropTypes.string,\n    title: PropTypes.string,\n    year: PropTypes.string,\n    poster: PropTypes.string\n  }\n\n  render () {\n    const { id, poster, title, year } = this.props\n\n    return (\n      <Link to={`/detail/${id}`} className=\"card\">\n        <div className=\"card-image\">\n          <figure className=\"image\">\n            <img\n              alt={title}\n              src={poster}\n            />\n          </figure>\n        </div>\n        <div className=\"card-content\">\n          <div className=\"media\">\n            <div className=\"media-content\">\n              <p className=\"title is-4\">{title}</p>\n              <p className=\"subtitle is-6\">{year}</p>\n            </div>\n          </div>\n        </div>\n      </Link>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Movie } from \"./Movie\";\n\nexport class MoviesList extends Component {\n  static propTypes = {\n    movies: PropTypes.array,\n  };\n\n  render() {\n    const { movies } = this.props;\n    return (\n      <div className=\"MoviesList\">\n        { movies.map((movie) => {\n          return (\n              <div className =\" MoviesList-item\" key={movie.imdbID}>\n            <Movie\n              id = {movie.imdbID}\n              title={movie.Title}\n              year={movie.year}\n              poster={movie.Poster}\n            />\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\"\n\nimport { Title } from \"../components/Title\";\nimport { SearchForm } from \"../components/SearchForm\";\nimport {MoviesList} from \"../components/MoviesList\"\n\nexport class Home extends Component {\n    state = { usedSearch: false, results: [] };\n\n    _handleResults = (results) => {\n      this.setState({ results , usedSearch: true});\n    }\n  \n    _renderResults= () =>{\n       return this.state.results.length === 0 \n        ? <p>Sorry! Results not found</p>\n         :  <MoviesList  movies = {this.state.results}/> \n    } \n    render(){\n        return (\n            <div className=\"App\">\n        <Title>Search Movies</Title>\n        <div className=\"SearchForm-wrapper\">\n          <SearchForm onResults={this._handleResults} />\n        </div>\n        {this.state.usedSearch \n        ? this._renderResults() \n        : <small>Use the form to search a movie</small>\n        }\n      </div>\n        )\n    }\n}","import React from \"react\"\nimport {Link} from \"react-router-dom\"\n\nexport const ButtonBackToHome = () => (\n    <Link\n    className =\"button is-info\"\n    to = \"/\">\n        Volver a la portada\n    </Link>\n)","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {ButtonBackToHome} from \"../components/ButtonBackToHome\"\n\nconst API_KEY = \"4287ad07\";\nexport class Detail extends Component {\n  static propTypes = {\n    match: PropTypes.shape({\n      params: PropTypes.object,\n      isExact: PropTypes.bool,\n      path: PropTypes.string,\n      url: PropTypes.string\n    })\n  }\n\n  state = { movie: {} };\n\n\n\n  _fetchMovie({ id }) {\n    fetch(`https://www.omdbapi.com/?apikey=${API_KEY}&i=${id}`)\n      .then((res) => res.json())\n      .then((movie) => {\n        this.setState({ movie });\n      })\n  }\n  componentDidMount() {\n    const { movieId } = this.props.match.params;\n    this._fetchMovie({ id:movieId });\n  }\n\n  _goBack(){\n      window.history.back();\n  }\n\n  render() {\n    const { Title, Poster, Actors, Metascore, Plot } = this.state.movie;\n    return (\n      <div>\n        <ButtonBackToHome/>\n        <h1>{Title}</h1>\n        <img src={Poster} />\n        <h3>{Actors}</h3>\n        <span>{Metascore}</span>\n        <p>{Plot}</p>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport {ButtonBackToHome} from \"../components/ButtonBackToHome\"\n\nexport const NotFound = () => (\n  <div>\n    <h1 style={{ color: \"#000\", fontSize: 30 }}>404!</h1>\n    <h2>No existe la p√†gina</h2>\n    <ButtonBackToHome></ButtonBackToHome>\n  </div>\n)\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"bulma/css/bulma.css\";\nimport {Switch, Route} from \"react-router-dom\"\nimport { Home } from \"./pages/Home\";\nimport { Detail } from \"./pages/Detail\";\nimport {NotFound} from \"./pages/NotFound\"\n\nclass App extends Component {\n  render() {\n  \n    return (\n      <div className=\"App\">\n      <Switch>\n        <Route exact path='/' component={Home} /> \n        <Route exact path=\"/detail/:movieId\" component={Detail} />\n        < Route component = {NotFound}/>\n      </Switch>\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}